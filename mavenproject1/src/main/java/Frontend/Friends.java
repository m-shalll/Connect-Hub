/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package Frontend;
import Backend.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.*; 
import java.awt.*; 
/**
 *
 * @author AbdElrahman
 */
public class Friends extends javax.swing.JDialog {
   public ArrayList<User> users;
   public User targetUser;
   private GroupManagement groupDatabase;
   private ArrayList<GroupInterface> groups;
  
    public Friends(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        groupDatabase = GroupManagement.getInstance();
        groups = groupDatabase.loadGroups();
       users=LogInPannel.users;
       targetUser=LogInPannel.logIn;
        //generate friend requests
        loadList1();
        //generate friends list
        loadList2();
        //generate suggestions
        loadList3();
    }
    public void loadList1(){
         ArrayList<String> names = new ArrayList<>();
    
    // Get the friend requests map for the target user
    Map<String, String> friendReq = targetUser.getFriendReq();
    
    // Iterate over the map to check for "Pending" requests
System.out.println(friendReq.entrySet());
    for (Map.Entry<String, String> entry : friendReq.entrySet()) {
        if ("pending".equals(entry.getValue())) {
            names.add(entry.getKey()); 
            //System.out.println("899"+names);
        }
    }
    
    // Set the list data for your JList
    jList2.setListData(names.toArray(new String[0]));
}
    public void loadList2(){
    ArrayList<String> names = new ArrayList<>();
    //generate all friends of specified user
    for(String i: targetUser.getFriends()){
    names.add(i);
    }
        System.out.println(names);
    //adds the arraylist created to jlist by converting to array
    jList1.setListData(names.toArray(new String[0]));
    }
    
    public void loadList3(){
   ArrayList<String> names =LogInPannel.f.suggestedFriends(targetUser, users);
        System.out.println(names);
   jList3.setListData(names.toArray(new String[0]));
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchPannel = new javax.swing.JDialog();
        results = new javax.swing.JPanel();
        jDialog2 = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        Add = new javax.swing.JButton();
        Decline = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();
        Block = new javax.swing.JButton();
        Remove = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList3 = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();
        Request = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        Search = new javax.swing.JButton();

        javax.swing.GroupLayout resultsLayout = new javax.swing.GroupLayout(results);
        results.setLayout(resultsLayout);
        resultsLayout.setHorizontalGroup(
            resultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 607, Short.MAX_VALUE)
        );
        resultsLayout.setVerticalGroup(
            resultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 378, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout searchPannelLayout = new javax.swing.GroupLayout(searchPannel.getContentPane());
        searchPannel.getContentPane().setLayout(searchPannelLayout);
        searchPannelLayout.setHorizontalGroup(
            searchPannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchPannelLayout.createSequentialGroup()
                .addComponent(results, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        searchPannelLayout.setVerticalGroup(
            searchPannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPannelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(results, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jDialog2Layout = new javax.swing.GroupLayout(jDialog2.getContentPane());
        jDialog2.getContentPane().setLayout(jDialog2Layout);
        jDialog2Layout.setHorizontalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog2Layout.setVerticalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jLabel1.setText("Friend Requests");

        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jList1);

        Add.setText("Add");
        Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddActionPerformed(evt);
            }
        });

        Decline.setText("Decline");
        Decline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeclineActionPerformed(evt);
            }
        });

        jLabel2.setText("Friends List");

        jList2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(jList2);

        Block.setText("Block");
        Block.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BlockActionPerformed(evt);
            }
        });

        Remove.setText("Remove");
        Remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveActionPerformed(evt);
            }
        });

        jList3.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(jList3);

        jLabel3.setText("Suggestions");

        Request.setText("Send friend request");
        Request.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RequestActionPerformed(evt);
            }
        });

        jButton2.setText("Refresh");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        Search.setText("Search");
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Add)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Decline)
                        .addGap(86, 86, 86)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Block)
                                .addGap(18, 18, 18)
                                .addComponent(Remove)
                                .addGap(77, 77, 77)
                                .addComponent(Request))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(51, 51, 51)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(134, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Search)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Search))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Block)
                    .addComponent(Remove)
                    .addComponent(Request)
                    .addComponent(Add)
                    .addComponent(Decline))
                .addGap(18, 18, 18)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddActionPerformed
String s=jList2.getSelectedValue();
        System.out.println(s);


if(s==null)
 JOptionPane.showMessageDialog(this, "Must choose User","Error",JOptionPane.ERROR_MESSAGE);
else{

    
       try {
           
           
           User r = LogInPannel.manager.getUser(s,users);
           try {
               LogInPannel.f.acceptFriendRequest(targetUser,r);
           } catch (IOException ex) {
               Logger.getLogger(Friends.class.getName()).log(Level.SEVERE, null, ex);
           }
           
JOptionPane.showMessageDialog(this, "Friend Added", "Information", JOptionPane.INFORMATION_MESSAGE);
           
       } catch (IOException ex) {
        Logger.getLogger(Friends.class.getName()).log(Level.SEVERE, null, ex);
    }
       loadList1();
       loadList2();
       try {
            AccountManagement.saveUsers(users);
            // TODO add your handling code here:
        } catch (IOException ex) {
            Logger.getLogger(Friends.class.getName()).log(Level.SEVERE, null, ex);
        }
 
}


        // TODO add your handling code here:
    }//GEN-LAST:event_AddActionPerformed

    private void DeclineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeclineActionPerformed
String s=jList2.getSelectedValue();
        System.out.println(s);


if(s==null)
 JOptionPane.showMessageDialog(this, "Must choose User","Error",JOptionPane.ERROR_MESSAGE);
else{

    
       try {
           
           
           User r = LogInPannel.manager.getUser(s,users);
           try {
               LogInPannel.f.declineFriendRequest(targetUser, r);
           } catch (IOException ex) {
               Logger.getLogger(Friends.class.getName()).log(Level.SEVERE, null, ex);
           }
           
JOptionPane.showMessageDialog(this, "Friend Request Declined", "Information", JOptionPane.INFORMATION_MESSAGE);
           
       } catch (IOException ex) {
        Logger.getLogger(Friends.class.getName()).log(Level.SEVERE, null, ex);
    }
        loadList1();
        try {
            AccountManagement.saveUsers(users);
            // TODO add your handling code here:
        } catch (IOException ex) {
            Logger.getLogger(Friends.class.getName()).log(Level.SEVERE, null, ex);
        }

}
        // TODO add your handling code here:
    }//GEN-LAST:event_DeclineActionPerformed

    private void BlockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BlockActionPerformed
        String s=jList1.getSelectedValue();
        System.out.println(s);


if(s==null)
 JOptionPane.showMessageDialog(this, "Must choose User","Error",JOptionPane.ERROR_MESSAGE);
else{

    
       User r;
            try {
                r = LogInPannel.manager.getUser(s,users);
                  try {
        LogInPannel.f.blockUser(targetUser, r);
    } catch (IOException ex) {
        Logger.getLogger(Friends.class.getName()).log(Level.SEVERE, null, ex);
    }

    
            } catch (IOException ex) {
                Logger.getLogger(Friends.class.getName()).log(Level.SEVERE, null, ex);
            }
     
JOptionPane.showMessageDialog(this, "Blocked User", "Information", JOptionPane.INFORMATION_MESSAGE);
 loadList2();
 try {
            AccountManagement.saveUsers(users);
            // TODO add your handling code here:
        } catch (IOException ex) {
            Logger.getLogger(Friends.class.getName()).log(Level.SEVERE, null, ex);
        }
}
// TODO add your handling code here:
    }//GEN-LAST:event_BlockActionPerformed

    private void RemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveActionPerformed
       String s=jList1.getSelectedValue();
        System.out.println(s);


if(s==null)
 JOptionPane.showMessageDialog(this, "Must choose User","Error",JOptionPane.ERROR_MESSAGE);
else{

    
       try {
           
           
           User r = LogInPannel.manager.getUser(s,users);
           System.out.println("990"+r);
           try {
              LogInPannel.f.removeFriend(targetUser, r);
           } catch (IOException ex) {
               Logger.getLogger(Friends.class.getName()).log(Level.SEVERE, null, ex);
           }
           
JOptionPane.showMessageDialog(this, "Removed User", "Information", JOptionPane.INFORMATION_MESSAGE);
           
       } catch (IOException ex) {
        Logger.getLogger(Friends.class.getName()).log(Level.SEVERE, null, ex);
    }
       loadList2();
       try {
            AccountManagement.saveUsers(users);
            // TODO add your handling code here:
        } catch (IOException ex) {
            Logger.getLogger(Friends.class.getName()).log(Level.SEVERE, null, ex);
        }
       System.out.println("friends:"+targetUser.getFriends());
 
}        
// TODO add your handling code here:
    }//GEN-LAST:event_RemoveActionPerformed

    private void RequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RequestActionPerformed
              String s=jList3.getSelectedValue();
        System.out.println(s);


if(s==null)
 JOptionPane.showMessageDialog(this, "Must choose User","Error",JOptionPane.ERROR_MESSAGE);
else{

    
       try {
           
           
           User r = LogInPannel.manager.getUser(s,users);
           try {
               LogInPannel.f.sendFriendRequest(targetUser, r);
           } catch (IOException ex) {
               Logger.getLogger(Friends.class.getName()).log(Level.SEVERE, null, ex);
           }
           
           
JOptionPane.showMessageDialog(this, "Friend Request Sent", "Information", JOptionPane.INFORMATION_MESSAGE);
            
       } catch (IOException ex) {
        Logger.getLogger(Friends.class.getName()).log(Level.SEVERE, null, ex);
    }
 loadList3();
 try {
            AccountManagement.saveUsers(users);
            // TODO add your handling code here:
        } catch (IOException ex) {
            Logger.getLogger(Friends.class.getName()).log(Level.SEVERE, null, ex);
        }
}
        // TODO add your handling code here:
    }//GEN-LAST:event_RequestActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
          try {
           users=LogInPannel.manager.loadUsers();
       } catch (IOException ex) {
           Logger.getLogger(Friends.class.getName()).log(Level.SEVERE, null, ex);
       }
            try {
           targetUser=LogInPannel.manager.getUser(LogInPannel.userName, users);
           // TODO add your handling code here:
       } catch (IOException ex) {
           Logger.getLogger(Friends.class.getName()).log(Level.SEVERE, null, ex);
       }
        loadList1();
        loadList2();
        loadList3();
        
       /* try {
            AccountManagement.saveUsers(users);
            // TODO add your handling code here:
        } catch (IOException ex) {
            Logger.getLogger(Friends.class.getName()).log(Level.SEVERE, null, ex);
        }*/
     
     
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            AccountManagement.saveUsers(users);
            // TODO add your handling code here:
        } catch (IOException ex) {
            Logger.getLogger(Friends.class.getName()).log(Level.SEVERE, null, ex);
        }
        FeedWindow x = new FeedWindow(targetUser);
        x.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        results.removeAll();
        searchPannel.revalidate();
        searchPannel.repaint();
        results.setLayout(new BoxLayout(results, BoxLayout.Y_AXIS));
        String searchText = jTextField1.getText().trim();
        if (searchText.isEmpty()) {
            //System.out.println("Wrong search input");
            javax.swing.JOptionPane.showMessageDialog(this,
                    " Please enter Text",
                    "Error",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
            return; // Exit early for invalid input
        }
        ArrayList<User> userFriends = new ArrayList<>();
        ArrayList<User> userNonFriends = new ArrayList<>();
        ArrayList<User> userSentFriends = new ArrayList<>();
        ArrayList<User> userRecievedFriends = new ArrayList<>();
        
        ArrayList<GroupInterface> inGrp = new ArrayList<>();
        ArrayList<GroupInterface> noGrp = new ArrayList<>();
        ArrayList<GroupInterface> reqForGrp = new ArrayList<>();
        FriendManagement f =LogInPannel.f;
        System.out.println(searchText);
        // Categorize users into friends and non-friends
        for (User i : users) {
            if (!i.getUserId().equals(targetUser.getUserId()) && i.getUserName().toLowerCase().contains(searchText.toLowerCase())) {
                System.out.println("11");
                System.out.println(i.getUserName()+" "+i.getUserId());
                if (i.getFriends().contains(targetUser.getUserId())) {
                    userFriends.add(i); // viewprofile block remove 
                } else if (i.getFriendReq().containsKey(targetUser.getUserId())) {
                    if (i.getFriendReq().get(targetUser.getUserId()).equals("pending")) {
                        userSentFriends.add(i); // viewprofile block
                    }
                } else if (targetUser.getFriendReq().containsKey(i.getUserId())) {
                    if (targetUser.getFriendReq().get(i.getUserId()).equals("pending")) {
                        userRecievedFriends.add(i); // viewprofile block accept decline
                    }
                }
                 else if (!targetUser.getBlocked().contains(i.getUserId())) {
                     System.out.println("44");
                    userNonFriends.add(i); // viewprofile block add
                }
            }
            
        }
        System.out.println(userFriends);
        System.out.println(userSentFriends);
        System.out.println(userRecievedFriends);
        System.out.println(userNonFriends);
        JLabel kindLabel = new JLabel("Friends:");
    kindLabel.setPreferredSize(new Dimension(200, 30));
    results.add(kindLabel);
    JSeparator fSeparator = new JSeparator();
    results.add(fSeparator, BorderLayout.SOUTH);
    
        //display friends
        for (User friend : userFriends) {
            if(friend==null)
                break;
    JPanel entryPanel = friendPanel(friend);
    results.add(entryPanel);
    JSeparator separator = new JSeparator();
    results.add(separator, BorderLayout.SOUTH);
}
        //display Rec Friendreq
       for (User friend : userSentFriends) {
           if(friend==null)
                break;
    JPanel entryPanel = friendSentPanel(friend);
    results.add(entryPanel);
    JSeparator separator = new JSeparator();
    results.add(separator, BorderLayout.SOUTH);
}
       //display sent Friendreq
       for (User friend : userRecievedFriends) {
           if(friend==null)
                break;
    JPanel entryPanel = friendRecPanel(friend);
    results.add(entryPanel);
    JSeparator separator = new JSeparator();
    results.add(separator, BorderLayout.SOUTH);
}
       //display non-friends
       for (User nonFriend : userNonFriends) {
           if(nonFriend==null)
                break;
    JPanel entryPanel = sugPanel(nonFriend);
    results.add(entryPanel);

    JSeparator separator = new JSeparator();
    results.add(separator, BorderLayout.SOUTH);
}
       if(userNonFriends.isEmpty()&&userRecievedFriends.isEmpty()&&userSentFriends.isEmpty()&&userFriends.isEmpty()){
            JLabel nLabel = new JLabel("No Results that match search");
    kindLabel.setPreferredSize(new Dimension(150, 30));
    results.add(nLabel);
    JSeparator gSeparator = new JSeparator();
    results.add(gSeparator, BorderLayout.SOUTH);
       }
           
 //categorize groups
 for(GroupInterface g:groups){
 if(g.getName().toLowerCase().contains(searchText.toLowerCase())){
     if(g.getUsers().equals(targetUser.getUserId()))
         inGrp.add(g);
     else if(g.getGroupRequests().containsKey(targetUser.getUserId())){
         if(g.getGroupRequests().get(targetUser.getUserId()).equals("pending"))
             reqForGrp.add(g);}
     else if(g.getGroupRequests().containsKey(targetUser.getUserId())){
         if(!g.getGroupRequests().get(targetUser.getUserId()).equals("declined"))
     noGrp.add(g);
     }
 }

 }
         JLabel gLabel = new JLabel("Groups:");
    kindLabel.setPreferredSize(new Dimension(150, 30));
    results.add(gLabel);
    JSeparator gSeparator = new JSeparator();
    results.add(gSeparator, BorderLayout.SOUTH);
//Display groups user is in
       for (GroupInterface g : inGrp) {
            if(g==null)
                break;
    JPanel entryPanel = inGrpPanel(g);
    results.add(entryPanel);
    JSeparator separator = new JSeparator();
    results.add(separator, BorderLayout.SOUTH);
}
       //Display groups user sent req for
       for (GroupInterface g : reqForGrp) {
            if(g==null)
                break;
    JPanel entryPanel = reqForGrpPanel(g);
    results.add(entryPanel);
    JSeparator separator = new JSeparator();
    results.add(separator, BorderLayout.SOUTH);
}
       //Display groups user is not in
       for (GroupInterface g : noGrp) {
            if(g==null)
                break;
    JPanel entryPanel = noGrpPanel(g);
    results.add(entryPanel);
    JSeparator separator = new JSeparator();
    results.add(separator, BorderLayout.SOUTH);
}
      if(noGrp.isEmpty()&&reqForGrp.isEmpty()&&inGrp.isEmpty()){
            JLabel nLabel = new JLabel("No Results that match search");
    kindLabel.setPreferredSize(new Dimension(150, 30));
    results.add(nLabel);
    JSeparator mSeparator = new JSeparator();
    results.add(mSeparator, BorderLayout.SOUTH);
       }
      searchPannel.revalidate();
        searchPannel.repaint();
        searchPannel.setTitle("Search For Users");
    searchPannel.setSize(600, 500);
        searchPannel.setLocationRelativeTo(this);
    searchPannel.setModal(true);
        searchPannel.setVisible(true);
        searchPannel.pack();
 

        // TODO add your handling code here:
    }//GEN-LAST:event_SearchActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
       try {
           AccountManagement.saveUsers(users);
       } catch (IOException ex) {
           Logger.getLogger(Friends.class.getName()).log(Level.SEVERE, null, ex);
       }
        FeedWindow x = new FeedWindow(targetUser);
        x.setVisible(true);
        this.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosed
private JPanel friendPanel(User friend) {
    JPanel panel = new JPanel();
    panel.setLayout(new FlowLayout(FlowLayout.LEFT));

    JLabel usernameLabel = new JLabel(friend.getUserName());
     usernameLabel.setPreferredSize(new Dimension(150, 30)); // Adjust dimensions as needed
    panel.add(usernameLabel);
    JLabel useridLabel = new JLabel(friend.getUserId());
    usernameLabel.setPreferredSize(new Dimension(150, 30)); // Adjust dimensions as needed
    panel.add(useridLabel);

    // Button to view the friend's profile
    JButton viewProfileButton = new JButton("View Profile");
    //Here add view Profile functionality
    /*viewProfileButton.addActionListener(e -> {
        // Code to view profile
        System.out.println("Viewing profile of: " + friend.getUsername());
        viewProfile(friend);
    });*/
    panel.add(viewProfileButton);

    // Button to block the friend
    JButton blockButton = new JButton("Block");
    blockButton.addActionListener(e -> {
                         try {
        LogInPannel.f.blockUser(targetUser, friend);
    } catch (IOException ex) {
        Logger.getLogger(Friends.class.getName()).log(Level.SEVERE, null, ex);
    }
                          try {
            AccountManagement.saveUsers(users);
            // TODO add your handling code here:
        } catch (IOException ex) {
            Logger.getLogger(Friends.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("Blocking user: " + friend.getUserName());
        //blockUser(friend);
    });
    panel.add(blockButton);

    // Button to remove the friend
    JButton removeButton = new JButton("Remove Friend");
    removeButton.addActionListener(e -> {
          try {
              LogInPannel.f.removeFriend(targetUser, friend);
           } catch (IOException ex) {
               Logger.getLogger(Friends.class.getName()).log(Level.SEVERE, null, ex);
           }
           try {
            AccountManagement.saveUsers(users);
            // TODO add your handling code here:
        } catch (IOException ex) {
            Logger.getLogger(Friends.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("Removing friend: " + friend.getUserName());
        //removeFriend(friend);
    });
    panel.add(removeButton);

    return panel;
}
private JPanel friendSentPanel(User friend) {
    
    JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT));   
    // display username
    JLabel usernameLabel = new JLabel(friend.getUserName());
    usernameLabel.setPreferredSize(new Dimension(150, 30));
    panel.add(usernameLabel);
    JLabel useridLabel = new JLabel(friend.getUserId());
    usernameLabel.setPreferredSize(new Dimension(150, 30)); // Adjust dimensions as needed
    panel.add(useridLabel);

    // View Prof Button
    JButton viewProfileButton = new JButton("View Profile");
    //Do view prof functionality here
    /*viewProfileButton.addActionListener(e -> {
        
        System.out.println("Viewing profile of " + friend.getUserName());
    });*/
    panel.add(viewProfileButton);

    // Decline request
    JButton cancelRequestButton = new JButton("Decline Request");
    cancelRequestButton.addActionListener(e -> {
          try {
               LogInPannel.f.declineFriendRequest(targetUser, friend);
           } catch (IOException ex) {
               Logger.getLogger(Friends.class.getName()).log(Level.SEVERE, null, ex);
           }
           try {
            AccountManagement.saveUsers(users);
            // TODO add your handling code here:
        } catch (IOException ex) {
            Logger.getLogger(Friends.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("Cancelled friend request for " + friend.getUserName());
    });
    panel.add(cancelRequestButton);

    
    return panel;
}
private JPanel friendRecPanel(User friend) {
    JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT));
    
    JLabel usernameLabel = new JLabel(friend.getUserName());
    usernameLabel.setPreferredSize(new Dimension(150, 30)); // Adjust dimensions as needed
    panel.add(usernameLabel);
    JLabel useridLabel = new JLabel(friend.getUserId());
    usernameLabel.setPreferredSize(new Dimension(150, 30)); // Adjust dimensions as needed
    panel.add(useridLabel);

    //Accept button
    JButton acceptButton = new JButton("Accept");
    acceptButton.addActionListener(e -> {
         try {
               LogInPannel.f.acceptFriendRequest(targetUser,friend);
           } catch (IOException ex) {
               Logger.getLogger(Friends.class.getName()).log(Level.SEVERE, null, ex);
           }
          try {
            AccountManagement.saveUsers(users);
            // TODO add your handling code here:
        } catch (IOException ex) {
            Logger.getLogger(Friends.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("Accepted friend request from " + friend.getUserName());
        // Add logic to update the backend or database
    });
    panel.add(acceptButton);

    // Add Decline button
    JButton declineButton = new JButton("Decline");
    declineButton.addActionListener(e -> {
        try {
               LogInPannel.f.declineFriendRequest(targetUser, friend);
           } catch (IOException ex) {
               Logger.getLogger(Friends.class.getName()).log(Level.SEVERE, null, ex);
           }
         try {
            AccountManagement.saveUsers(users);
            // TODO add your handling code here:
        } catch (IOException ex) {
            Logger.getLogger(Friends.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("Declined friend request from " + friend.getUserName());
        // Add logic to update the backend or database
    });
    panel.add(declineButton);

    // Add View Profile button
    JButton viewProfileButton = new JButton("View Profile");
    // add view prof functionality here
    /*viewProfileButton.addActionListener(e -> {
        // Handle View Profile action
        System.out.println("Viewing profile of " + friend.getUserName());
        // Add logic to display the user's profile in the UI
    });*/
    panel.add(viewProfileButton);

    return panel;
}
private JPanel sugPanel(User nonFriend) {
    JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT));

    // Add user details
    JLabel usernameLabel = new JLabel(nonFriend.getUserName());
    usernameLabel.setPreferredSize(new Dimension(150, 30)); // Adjust dimensions as needed
    panel.add(usernameLabel);
    JLabel useridLabel = new JLabel(nonFriend.getUserId());
    usernameLabel.setPreferredSize(new Dimension(150, 30)); // Adjust dimensions as needed
    panel.add(useridLabel);

    //Add Friend button
    JButton addFriendButton = new JButton("Add Friend");
    addFriendButton.addActionListener(e -> {
        
          try {
               LogInPannel.f.sendFriendRequest(targetUser, nonFriend);
           } catch (IOException ex) {
               Logger.getLogger(Friends.class.getName()).log(Level.SEVERE, null, ex);
           }
         try {
            AccountManagement.saveUsers(users);
            // TODO add your handling code here:
        } catch (IOException ex) {
            Logger.getLogger(Friends.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("Sent friend request to " + nonFriend.getUserName());
        // Add logic to update the backend or database
    });
    panel.add(addFriendButton);

    //Block button
    JButton blockButton = new JButton("Block");
    blockButton.addActionListener(e -> {
                              try {
        LogInPannel.f.blockUser(targetUser, nonFriend);
    } catch (IOException ex) {
        Logger.getLogger(Friends.class.getName()).log(Level.SEVERE, null, ex);
    }
                               try {
            AccountManagement.saveUsers(users);
            // TODO add your handling code here:
        } catch (IOException ex) {
            Logger.getLogger(Friends.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("Blocked " + nonFriend.getUserName());
        // Add logic to update the backend or database
    });
    panel.add(blockButton);

    // Add View Profile button
    JButton viewProfileButton = new JButton("View Profile");
            //do view prof functionality here//
   /* viewProfileButton.addActionListener(e -> {
        // Handle View Profile action
        System.out.println("Viewing profile of " + nonFriend.getUserName());
        // Add logic to display the user's profile in the UI
    });*/
    panel.add(viewProfileButton);

    return panel;
}
private JPanel inGrpPanel(GroupInterface g){
JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT));

    // Add user details
    JLabel usernameLabel = new JLabel(g.getName());
    usernameLabel.setPreferredSize(new Dimension(150, 30)); 
    panel.add(usernameLabel);
   

    //Add Friend button
    JButton viewGroup = new JButton("View Group");
    //add functionality here
        viewGroup.addActionListener(e -> {
    
    });
        panel.add(viewGroup);

return panel;
}
private JPanel noGrpPanel(GroupInterface g){
JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT));

    // Add user details
    JLabel usernameLabel = new JLabel(g.getName());
    usernameLabel.setPreferredSize(new Dimension(150, 30)); 
    panel.add(usernameLabel);
   

    //Add Friend button
    JButton viewGroup = new JButton("View Group");
    //add functionality here
        viewGroup.addActionListener(e -> {
    
    });
        panel.add(viewGroup);
         JButton request = new JButton("sent Request");
    //add functionality here
        viewGroup.addActionListener(e -> {
    
    });
panel.add(request);
return panel;
}
private JPanel reqForGrpPanel(GroupInterface g){
JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT));

    // Add user details
    JLabel usernameLabel = new JLabel(g.getName());
    usernameLabel.setPreferredSize(new Dimension(150, 30)); 
    panel.add(usernameLabel);
   

    //Add Friend button
    JButton viewGroup = new JButton("View Group");
    //add functionality here
        viewGroup.addActionListener(e -> {
    
    });
        panel.add(viewGroup);

return panel;
}



    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Friends.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Friends.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Friends.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Friends.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Friends dialog = new Friends(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add;
    private javax.swing.JButton Block;
    private javax.swing.JButton Decline;
    private javax.swing.JButton Remove;
    private javax.swing.JButton Request;
    private javax.swing.JButton Search;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JDialog jDialog2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jList2;
    private javax.swing.JList<String> jList3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JPanel results;
    private javax.swing.JDialog searchPannel;
    // End of variables declaration//GEN-END:variables
}
